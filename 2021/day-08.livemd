# Day 8

## Setup

```elixir
Mix.install([{:kino, "~> 0.4.1"}])
```

```elixir
test_input = Kino.Input.textarea("Test input")
```

```elixir
input = Kino.Input.textarea("Input")
```

## Parsing

```elixir
data =
  input
  |> Kino.Input.read()
  |> String.split("\n")
  |> Enum.map(fn line ->
    line
    |> String.split(" | ")
    |> Enum.map(&String.split/1)
  end)
```

## Part 1

```elixir
data
|> Enum.flat_map(&List.last/1)
|> Enum.count(fn
  string ->
    l = String.length(string)
    l == 2 || l == 3 || l == 4 || l == 7
end)
```

## Part 2

```elixir
defmodule DigitFix do
  def find_mapping(signals) do
    sorted =
      signals
      |> Enum.map(&String.graphemes/1)
      |> Enum.map(&Enum.sort/1)

    digit_mapping = %{
      1 => Enum.find(sorted, &(length(&1) == 2)),
      4 => Enum.find(sorted, &(length(&1) == 4)),
      7 => Enum.find(sorted, &(length(&1) == 3)),
      8 => Enum.find(sorted, &(length(&1) == 7))
    }

    # 2, 3, 5
    with_5_wires = Enum.filter(sorted, &(length(&1) == 5))
    # 0, 6, 9
    with_6_wires = Enum.filter(sorted, &(length(&1) == 6))

    nine =
      with_6_wires
      |> Enum.find(fn x ->
        length(x -- digit_mapping[4]) == 2
      end)

    segment_e = digit_mapping[8] -- nine

    two =
      with_5_wires
      |> Enum.find(fn x ->
        segment_e -- x == []
      end)

    three =
      with_5_wires
      |> Enum.find(fn x ->
        length(x -- two) == 1
      end)

    five =
      with_5_wires
      |> Enum.find(fn x ->
        length(x -- two) == 2
      end)

    six = Enum.sort(five ++ segment_e)

    zero =
      with_6_wires
      |> Kernel.--([six])
      |> Kernel.--([nine])
      |> List.first()

    digit_mapping
    |> Map.put(9, nine)
    |> Map.put(2, two)
    |> Map.put(3, three)
    |> Map.put(5, five)
    |> Map.put(6, six)
    |> Map.put(0, zero)
    |> Enum.reduce(%{}, fn {k, v}, acc -> Map.put(acc, Enum.join(v), k) end)
  end

  def decode([signals, output]) do
    mapping = find_mapping(signals)

    output
    |> Enum.map(fn string ->
      sorted_string =
        string
        |> String.to_charlist()
        |> Enum.sort()
        |> to_string

      mapping[sorted_string]
      |> to_string
    end)
    |> Enum.join()
    |> String.to_integer()
  end
end

data
|> Enum.map(&DigitFix.decode/1)
|> Enum.sum()
```
